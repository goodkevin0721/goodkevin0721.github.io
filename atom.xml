<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-06T04:55:29.354Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity之ChatGPT提问</title>
    <link href="http://example.com/2024/01/06/ChatGPT/"/>
    <id>http://example.com/2024/01/06/ChatGPT/</id>
    <published>2024-01-06T04:18:00.296Z</published>
    <updated>2024-01-06T04:55:29.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unity中normalized的含义及用途"><a class="markdownIt-Anchor" href="#unity中normalized的含义及用途"></a> Unity中normalized的含义及用途</h1><p>今天偶然发现一个不用账号也可以使用ChatGPT的网站，就问了几个关于normalized的问题，也顺便让自己深刻理解向量归一化用途，感觉真的是太强大了，以下是我提的问题。</p><h2 id="问题1unity-normalized-的意思是什么"><a class="markdownIt-Anchor" href="#问题1unity-normalized-的意思是什么"></a> 问题1.Unity normalized 的意思是什么</h2><p><strong>回答：</strong> Unity中的normalized属性通常指的是Vector（向量）的单位向量，也称为标准化向量。</p><p>单位向量是指在长度为1的情况下，与相应向量方向相同的向量。在Unity中，通过将向量除以其长度来获得单位向量，即：</p><p>normalizedVector = vector / vector.magnitude</p><p>标准化向量在计算、绘图和游戏开发等领域中经常使用，因为它们可以使计算更加准确，并且在方向表示和动画中非常有用。</p><img src="/2024/01/06/ChatGPT/1.png" class title="This is an image"> <h2 id="问题2vectormagnitude-的意思什么"><a class="markdownIt-Anchor" href="#问题2vectormagnitude-的意思什么"></a> 问题2.vector.magnitude 的意思什么</h2><p><strong>回答：</strong> 在Unity中，向量（Vector）是指在n维空间中表示大小和方向的实体。一个向量可以用其X、Y和Z分量表示。</p><p>而向量的magnitude属性是指其长度或大小。在三维空间中，一个向量的大小可以用勾股定理计算，即对其三个分量的平方求和，再求平方根。</p><p>在Unity中，可以使用向量的magnitude属性获得其大小，即：</p><p>float size = vector.magnitude;</p><p>此外，Unity中还提供了向量长度平方的sqrMagnitude属性，可以用来比magnitude属性更快地计算向量大小（省去平方根的开销），即：</p><p>float sizeSquared = vector.sqrMagnitude;</p><img src="/2024/01/06/ChatGPT/2.png" class title="This is an image"> <h2 id="问题3normalized-什么情况下使用呢"><a class="markdownIt-Anchor" href="#问题3normalized-什么情况下使用呢"></a> 问题3.normalized 什么情况下使用呢</h2><p><strong>回答：</strong> 在Unity中，正常情况下，使用向量（Vector）进行计算时，将它们变成单位向量（即normalized）是很常见的。这是因为单位向量具有方向，但是长度为1。这在进行方向表示、运动控制、动画过渡等方面是非常有用的。</p><p>以下是一些使用normalized向量的例子：</p><p>1.方向表示：将目标位置向量减去当前位置向量，得到指向目标的方向向量，然后归一化将其转换为单位向量，表示方向。</p><p>2.运动控制：使用方向向量控制物体的移动方向，并使用normalized向量进行平滑缓动。</p><p>3.碰撞检测：检查两个对象间的距离和方向，使用normalized向量表示方向，以便判断两个对象的相对方向。</p><p>4.绘图：使用normalized向量替代未归一化的向量进行绘图，提高图像质量。</p><p>总之，在需要使用方向向量、运动计算、碰撞检测、绘图等情况下，将向量归一化为单位向量是非常有用的。</p><img src="/2024/01/06/ChatGPT/3.png" class title="This is an image"> <h2 id="问题4那normalized向量进行平滑缓动-的代码实现"><a class="markdownIt-Anchor" href="#问题4那normalized向量进行平滑缓动-的代码实现"></a> 问题4.那normalized向量进行平滑缓动 的代码实现</h2><p><strong>回答：</strong> 直接上图了</p><img src="/2024/01/06/ChatGPT/4.png" class title="This is an image"> <p><strong>代码如下：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmoothMove</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Transform target;      <span class="comment">// 目标物体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed = <span class="number">5.0f</span>;    <span class="comment">// 移动速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> smoothTime = <span class="number">0.3f</span>;   <span class="comment">// 平滑时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector3 velocity = Vector3.zero;   <span class="comment">// 速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取目标位置</span></span><br><span class="line">        Vector3 targetPosition = target.position;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前位置和目标位置的向量差，即移动方向</span></span><br><span class="line">        Vector3 moveDirection = (targetPosition - transform.position).normalized;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用SmoothDamp函数使向量平滑缓动</span></span><br><span class="line">        Vector3 smoothedDirection = Vector3.SmoothDamp(transform.forward, moveDirection, <span class="keyword">ref</span> velocity, smoothTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让物体面向平滑缓动后的方向</span></span><br><span class="line">        transform.forward = smoothedDirection;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lerp函数使物体平移</span></span><br><span class="line">        transform.position = Vector3.Lerp(transform.position, targetPosition, speed * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="/2024/01/06/ChatGPT/5.gif" class title="This is an image"> <h2 id="问题5那说下第三个例子-碰撞检测-的代码实现"><a class="markdownIt-Anchor" href="#问题5那说下第三个例子-碰撞检测-的代码实现"></a> 问题5.那说下第三个例子 碰撞检测 的代码实现</h2><p><strong>回答：</strong></p><img src="/2024/01/06/ChatGPT/5.png" class title="This is an image"> <p><strong>运行效果：</strong></p><img src="/2024/01/06/ChatGPT/6.gif" class title="This is an image"> <p><strong>注意：</strong> 这个例子用的是大写Normalized，它是一个方法会改变原来的向量，normalized是一个属性，不会改变原来的向量，会返回一个新的向量<br><strong>代码逻辑说明：</strong> 自己向目标发射了一个射线，中间有其他物体的话，会挡住射线，认为没有碰撞到。</p><h2 id="问题6那第四个例子-怎么提高绘图质量呢"><a class="markdownIt-Anchor" href="#问题6那第四个例子-怎么提高绘图质量呢"></a> 问题6.那第四个例子 怎么提高绘图质量呢</h2><p><strong>回答：</strong></p><img src="/2024/01/06/ChatGPT/7.png" class title="This is an image"> <p>链接: <a href="https://freegpt.one/">link</a> （还能不能用，只能自己去试试了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;unity中normalized的含义及用途&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unity中normalized的含义及用途&quot;&gt;&lt;/a&gt; Unity中normalized的含义及用途&lt;/h1&gt;
&lt;p&gt;今天偶然发现一个不用账号</summary>
      
    
    
    
    
  </entry>
  
</feed>
